import React, { useState } from "react";
import styles from "./styles.module.css";
import axios from "axios";
import { useForm, Controller } from "react-hook-form";
import { TextField, Button } from "@mui/material";
import { LocalizationProvider, DatePicker } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import Autocomplete from "@mui/material/Autocomplete";
import { Dayjs } from "dayjs";

import {
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
} from "@mui/material";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/material.css";
import Third from "./third/Third";
import Level from "./level/Level";
import Final from "./final/Final";
const countries = [
  { code: "031", label: "Azerbaijan", flag: "üá¶üáø" },
  { code: "US", label: "United States", flag: "üá∫üá∏" },
  { code: "DE", label: "Germany", flag: "üá©üá™" },
  { code: "FR", label: "France", flag: "üá´üá∑" },
];

type FormValues = {
  nationality: string;
  fin: string;
  phone?: string;
  fin2?: string;
  birthDate: Dayjs | null;
  originCountry: "true" | "false";
};
type SecondValues = {
  phone?: string;
};
type ApiResponse = {
  code: number;
  data: {
    surname: string;
    name: string;
    fatherName: string;
    birthDate: string;
    serialNumber: string | null;
    pin: string | null;
    issuuiAuthority: string | null;
    issuingDate: string | null;
    expiryDate: string | null;
    countryId: string | null;
  };
  exception: string | null;
};

const Add: React.FC = () => {
  const [next, setNext] = useState<string>("1");
  const [data, setData] = useState<ApiResponse>();

  const [message, setMessage] = useState("");

  const [data2, setData2] = useState<string>("");

  const [isFirstOption, setIsFirstOption] = useState<boolean>(false);

  const {
    control,
    handleSubmit,
    formState: { errors },
    trigger,
  } = useForm<FormValues>({
    defaultValues: {
      nationality: "031",
      fin: "",
      fin2: "",
      birthDate: null,
      originCountry: "true",
    },
  });

  const {
    control: control2,
    handleSubmit: handleSubmit2,
    trigger: trigger2,
  } = useForm<SecondValues>({
    shouldFocusError: false,
    defaultValues: {
      phone: "",
    },
  });
  const onSecond = (data: SecondValues) => {
    if (data.phone != undefined) {
      setData2(data.phone);
    }
    setNext("3");
    console.log(data2);
  };

  const onSubmit = async (data: FormValues) => {
    console.log(data);
    const date =
      data.birthDate != null
        ? data.birthDate.format("YYYY-MM-DD")
        : data.birthDate;
    const url = `/api/v1/passenger-declaration/passenger?citizenship=${
      data.nationality
    }&isAdult=${data.originCountry}&passportNo=${data.fin}&birthDate=${date}${
      data.originCountry == "false" ? `&declarantDocNo=${data.fin2}` : ""
    }`;
    try {
      const response = await axios.get(url);
      setNext("2");
      setData(response.data);
    } catch (error) {
      console.error("Error posting data:", error);
      setMessage(
        "Daxil etdiyiniz Fƒ∞N-koda v…ô ya doƒüum tarixin…ô uyƒüun he√ß bir m…ôlumat tapƒ±lmadƒ±"
      );
      setTimeout(() => setMessage(""), 4000);
    }
  };

  return (
    <div>
      <Level next={next} />

      {/* Form */}
      <div
        className={styles.first}
        style={next == "1" ? {} : { display: "none" }}
      >
        <div className={styles.formWrapper}>
          <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>
            {/* Radio */}
            <Controller
              name="originCountry"
              control={control}
              rules={{ required: "M…ôcburi sah…ôdir" }}
              render={({ field }) => (
                <FormControl error={!!errors.originCountry}>
                  <FormLabel id="origin-country-label">
                    Kim…ô m…ôxsus mallarƒ± b…ôyan edirsiniz?
                  </FormLabel>
                  <RadioGroup
                    {...field}
                    aria-labelledby="origin-country-label"
                    onChange={(e) => {
                      field.onChange(e);
                      trigger("originCountry");
                      setIsFirstOption(e.target.value === "false");
                    }}
                  >
                    <FormControlLabel
                      value="true"
                      control={<Radio />}
                      label="M…ôn…ô m…ôxsus"
                    />
                    <FormControlLabel
                      value="false"
                      control={<Radio />}
                      label="18 ya≈üƒ±na √ßatmamƒ±≈ü ≈ü…ôxs…ô m…ôxsus"
                    />
                  </RadioGroup>
                  {errors.originCountry && (
                    <span>{errors.originCountry.message}</span>
                  )}
                </FormControl>
              )}
            />

            <Controller
              name="nationality"
              control={control}
              rules={{ required: "M√ºtl…ôq daxil edilm…ôlidir" }}
              render={({ field }) => (
                <Autocomplete
                  options={countries}
                  getOptionLabel={(option) => `${option.flag} ${option.label}`}
                  renderOption={(props, option) => (
                    <li {...props} key={option.code}>
                      {option.flag} {option.label}
                    </li>
                  )}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="V…ôt…ônda≈ülƒ±q"
                      error={!!errors.nationality}
                      helperText={errors.nationality?.message}
                    />
                  )}
                  value={
                    countries.find((country) => country.code === field.value) ||
                    null
                  }
                  onChange={(_, value) =>
                    field.onChange(value ? value.code : "")
                  }
                />
              )}
            />

            {/* FIN Input */}
            <Controller
              name="fin"
              control={control}
              rules={{
                required: "M√ºtl…ôq daxil edilm…ôlidir",
                minLength: {
                  value: 7,
                  message: "FIN must be at least 7 characters",
                },
              }}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Pasport n√∂mr…ôsi ( v…ô ya Fƒ∞N )"
                  error={!!errors.fin}
                  helperText={errors.fin?.message}
                  onChange={(e) => {
                    field.onChange(e);
                    trigger("fin");
                  }}
                />
              )}
            />

            {/* Birth Date Picker */}
            <Controller
              name="birthDate"
              control={control}
              rules={{ required: "M√ºtl…ôq daxil edilm…ôlidir" }}
              render={({ field }) => (
                <LocalizationProvider dateAdapter={AdapterDayjs}>
                  <DatePicker
                    {...field}
                    format="DD.MM.YYYY"
                    label="Doƒüum tarixi"
                    onChange={(date) => {
                      field.onChange(date);
                      trigger("birthDate");
                    }}
                    slotProps={{
                      textField: {
                        error: !!errors.birthDate,
                        helperText: errors.birthDate?.message,
                      },
                    }}
                  />
                </LocalizationProvider>
              )}
            />

            {/* FIN Input */}
            {isFirstOption && (
              <Controller
                name="fin2"
                control={control}
                rules={{
                  required: "M√ºtl…ôq daxil edilm…ôlidir",
                  minLength: {
                    value: 7,
                    message: "FIN must be at least 7 characters",
                  },
                }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="B…ôyan ed…ôn ≈ü…ôxsin pasport n√∂mr…ôsi (v…ô ya Fƒ∞N)"
                    error={!!errors.fin2}
                    helperText={errors.fin2?.message}
                    onChange={(e) => {
                      field.onChange(e);
                      trigger("fin2");
                    }}
                  />
                )}
              />
            )}
            <span className={styles.errorMsg}>{message}</span>
            <div className={styles.button}>
              {/* <Button variant="outlined" disabled>
               Geri
             </Button> */}
              <Button
                variant="contained"
                type="submit"
                style={{ background: "#1647a3" }}
              >
                ƒ∞r…ôli
              </Button>
            </div>
          </form>
        </div>

        <div className={styles.formInfo}>
          <h5>M…ôlumat</h5>
          <div></div>
          <span>H√∂rm…ôtli istifad…ô√ßi!</span>
          <p>
            Bu elektron xidm…ôtd…ôn istifad…ô ed…ôr…ôk g√∂mr√ºk s…ôrh…ôdind…ôn
            ke√ßir…ôc…ôyiniz mal, valyuta v…ô ya n…ôqliyyat vasit…ôl…ôrini b…ôyan edin.
            B…ôyannam…ôni t…ôqdim etdikd…ôn sonra onu √ßap edib v…ô ya QR kodunu
            y√ºkl…ôyib g√∂mr√ºk …ôm…ôkda≈üƒ±na t…ôqdim edin. G√∂mr√ºk s…ôrh…ôdind…ôn
            ke√ßir…ôc…ôyiniz mal siz…ô aiddirs…ô, <span>‚ÄúM…ôn…ô m…ôxsus‚Äù</span> sah…ôsini
            se√ßin v…ô ≈ü…ôxsi m…ôlumatlarƒ±nƒ±zƒ± daxil edin. ∆èg…ôr yetkinlik ya≈üƒ±na
            √ßatmayan ≈ü…ôxs…ô m…ôxsus mal b…ôyan edirsinizs…ô,{" "}
            <span>‚Äú18 ya≈üƒ±na √ßatmamƒ±≈ü ≈ü…ôxs…ô m…ôxsus‚Äù</span> sah…ôsini se√ßin, h…ômin
            ≈ü…ôxsin m…ôlumatlarƒ±nƒ± v…ô{" "}
            <span>‚ÄúB…ôyan ed…ôn ≈ü…ôxsin xarici pasport n√∂mr…ôsi(v…ô ya Fƒ∞N)‚Äù</span>{" "}
            sah…ôsin…ô is…ô √∂z pasport n√∂mr…ônizi daxil edin.
          </p>
        </div>
      </div>

      {/* Second */}
      <div
        className={styles.secondWrapper}
        style={next == "2" ? {} : { display: "none" }}
      >
        <div className={styles.second}>
          <div>
            Soyad
            <p>{data?.data.surname}</p>
          </div>
          <div>
            Ad
            <p>{data?.data.name}</p>
          </div>
          <div>
            Ata adƒ±
            <p>{data?.data.fatherName}</p>
          </div>
          <div>
            Fƒ∞N-i
            <p>{data?.data.pin}</p>
          </div>

          <form onSubmit={handleSubmit2(onSecond)}>
            <Controller
              name="phone"
              control={control2}
              rules={{ required: "Telefon n√∂mr…ôsi t…ôl…ôb olunur" }}
              render={({ field, fieldState }) => (
                <>
                  <PhoneInput
                    {...field}
                    country="az"
                    enableSearch
                    inputStyle={{
                      width: "100%",
                      borderColor: fieldState.error ? "#d32f2f" : "#c4c4c4",
                      borderWidth: "1px",
                      borderStyle: "solid",
                      borderRadius: "4px",
                    }}
                    inputProps={{
                      ref: field.ref,
                      name: "phone",
                      required: true,
                    }}
                    onChange={(value) => {
                      field.onChange(value);
                      trigger2("phone");
                    }}
                  />
                  {fieldState.error && (
                    <span style={{ color: "#d32f2f", fontSize: "12px" }}>
                      {fieldState.error.message}
                    </span>
                  )}
                </>
              )}
            />
            <div className={styles.button}>
              <Button
                variant="outlined"
                onClick={() => setNext("1")}
                style={{ color: "#1647a3", borderColor: "#1647a3" }}
              >
                Geri
              </Button>
              <Button
                variant="contained"
                type="submit"
                style={{ background: "#1647a3" }}
              >
                ƒ∞r…ôli
              </Button>
            </div>
          </form>
        </div>

        <div className={styles.formInfo}>
          <h5>M…ôlumat</h5>
          <div></div>
          <span>H√∂rm…ôtli istifad…ô√ßi!</span>
          <p>
            ≈û…ôxsi m…ôlumatlarƒ±nƒ±zƒ± daxil edin. ∆èg…ôr m…ôlumatlar sistem t…ôr…ôfind…ôn
            avtomatik doldurulsa, onlarƒ±n doƒüru olduƒüundan …ômin olun.
            <br />
            Telefon n√∂mr…ôsini d√ºzg√ºn daxil etdiyinizd…ôn …ômin olun. Ehtiyac
            olduƒüu t…ôqdird…ô qeyd olunan n√∂mr…ôy…ô SMS m…ôlumatlar g√∂nd…ôril…ôc…ôk
          </p>
        </div>
      </div>

      <div style={next == "3" ? {} : { display: "none" }}>
        <Third setNext={setNext} />
      </div>
      <div style={next == "4" ? {} : { display: "none" }}>
        <Final />
      </div>
    </div>
  );
};

export default Add;
